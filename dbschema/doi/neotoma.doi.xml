<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<database name="neotoma" schema="doi" type="PostgreSQL - 9.6.24">
   <tables>
      <table name="doimeta" numRows="39461" remarks="" schema="doi" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="doi" nullable="false" remarks="" size="2147483647" type="varchar" typeCode="12"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="meta" nullable="true" remarks="" size="2147483647" type="jsonb" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="2" name="datasetid" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <primaryKey column="doi" sequenceNumberInPK="1"/>
         <index name="doimeta_pkey" unique="true">
            <column ascending="true" name="doi"/>
         </index>
      </table>
      <table name="frozen" numRows="41183" remarks="" schema="doi" type="TABLE">
         <column autoUpdated="false" defaultValue="null" digits="0" id="0" name="datasetid" nullable="true" remarks="" size="10" type="int4" typeCode="4"/>
         <column autoUpdated="false" defaultValue="null" digits="0" id="1" name="download" nullable="false" remarks="" size="2147483647" type="jsonb" typeCode="1111"/>
         <column autoUpdated="false" defaultValue="now()" digits="6" id="2" name="recdatecreated" nullable="true" remarks="" size="29" type="timestamp" typeCode="93"/>
         <column autoUpdated="false" defaultValue="now()" digits="6" id="3" name="recmodified" nullable="true" remarks="" size="29" type="timestamp" typeCode="93"/>
      </table>
   </tables>
   <routines>
      <routine dataAccess="MODIFIES" deterministic="false" name="agerange" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
SELECT dts.datasetid, json_agg(jsonb_build_object('ageyoung', agerange.younger,
                                'ageold', agerange.older,
                                 'units', agetypes.agetype)) AS agerange
FROM
ndb.datasets AS dts
LEFT OUTER JOIN ndb.dsageranges AS agerange ON dts.datasetid = agerange.datasetid
LEFT OUTER JOIN ndb.agetypes AS agetypes ON agetypes.agetypeid = agerange.agetypeid
WHERE dts.datasetid = dsid
GROUP BY dts.datasetid;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="chronmeta" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	WITH contactinfo AS (
		SELECT
		chrs.chronologyid,
		json_agg(json_build_object('contactid', cnt.contactid,
											'contactname', cnt.contactname,
											'familyname', cnt.familyname,
											'givenname', cnt.givennames,
											'leadinginitial', cnt.leadinginitials)) AS contact
			FROM ndb.dslinks AS dsl
			LEFT OUTER JOIN     ndb.chronologies AS chrs    ON chrs.collectionunitid = dsl.collectionunitid
			LEFT OUTER JOIN          ndb.contacts AS cnt    ON cnt.contactid = chrs.contactid
		WHERE    dsl.datasetid = ANY(dsid) AND cnt.contactid IS NOT NULL
		GROUP BY chrs.chronologyid

	),
	chronmeta AS (
		SELECT
			chrs.chronologyid,
			jsonb_build_object('modelagetype', aty.agetype,
							'isdefault', chrs.isdefault,
							'chronologyname', chrs.chronologyname,
							'dateprepared', chrs.dateprepared,
							'agemodel', chrs.agemodel,
							'agerange', json_build_object('ageboundyounger', chrs.ageboundyounger,
														  'ageboundolder', chrs.ageboundolder),
							'notes', chrs.notes,
							'contact', cinf.contact) AS meta
		FROM          ndb.dslinks AS dsl
		  LEFT OUTER JOIN      ndb.chronologies AS chrs         ON chrs.collectionunitid = dsl.collectionunitid
		  LEFT OUTER JOIN          ndb.agetypes AS aty    ON chrs.agetypeid = aty.agetypeid
		  LEFT OUTER JOIN          ndb.datasets AS dts    ON dsl.datasetid = dts.datasetid
		  LEFT OUTER JOIN contactinfo AS cinf ON cinf.chronologyid = chrs.chronologyid
		WHERE    dsl.datasetid = ANY(dsid)
	)
	SELECT
	  dts.datasetid,
	  json_build_object('chronologyid', cmet.chronologyid,
						'chronology', cmet.meta,
	  'chroncontrols',
		  json_agg(json_build_object('chroncontrolid', chctrl.chroncontrolid,
							'depth', chctrl.depth,
							'thickness', chctrl.thickness,
							'chroncontrolage', chctrl.age,
	  'agelimityounger', chctrl.agelimityounger,
	  'agelimitolder', chctrl.agelimitolder,
	  'chroncontroltype', chty.chroncontroltype,
	  'geochron', json_build_object('geochronid', gc.geochronid,
									'labnumber', gc.labnumber,
									'geochrontype', gct.geochrontype,
									'geochronage', gc.age,
									'geochronerrorolder', gc.errorolder,
									'geochronerroryounger', gc.erroryounger,
									'infinite', gc.infinite,
									'delta13c', gc.delta13c,
									'agetype', atyg.agetype,
									'geochronnotes', gc.notes,
									'geochronmaterialdated', gc.materialdated,
							  	'radiocarbonmethod', rcm.radiocarbonmethod,
							    'percentc', rcb.percentc,
							    'percentn', rcb.percentn,
						      'delta13c', rcb.delta13c,
					        'delta15n', rcb.delta15n,
				          'percentcollagen', rcb.percentcollagen,
			            'reservoir', rcb.reservoir)))) AS meta
	FROM            ndb.dslinks AS dsl
		  LEFT OUTER JOIN     ndb.chronologies AS chrs          ON chrs.collectionunitid = dsl.collectionunitid
	  LEFT OUTER JOIN     ndb.chroncontrols AS chctrl ON chrs.chronologyid = chctrl.chronologyid
	  LEFT OUTER JOIN ndb.chroncontroltypes AS chty   ON chctrl.chroncontroltypeid = chty.chroncontroltypeid

	  LEFT OUTER JOIN          ndb.agetypes AS aty    ON chrs.agetypeid = aty.agetypeid
	  LEFT OUTER JOIN          ndb.datasets AS dts    ON dsl.datasetid = dts.datasetid
	  LEFT OUTER JOIN      ndb.datasettypes AS dty    ON dts.datasettypeid = dty.datasettypeid
	  LEFT OUTER JOIN  ndb.geochroncontrols AS gcc    ON gcc.chroncontrolid = chctrl.chroncontrolid
	  LEFT OUTER JOIN     ndb.geochronology AS gc     ON gc.geochronid = gcc.geochronid
	  LEFT OUTER JOIN     ndb.geochrontypes AS gct    ON gct.geochrontypeid = gc.geochrontypeid
	  LEFT OUTER JOIN          ndb.agetypes AS atyg   ON atyg.agetypeid = gc.agetypeid
	  LEFT OUTER JOIN chronmeta AS cmet ON cmet.chronologyid = chrs.chronologyid
		LEFT OUTER JOIN ndb.radiocarbon AS rcb ON rcb.geochronid = gc.geochronid
		LEFT JOIN ndb.radiocarbonmethods AS rcm ON rcm.radiocarbonmethodid = rcb.radiocarbonmethodid
	WHERE    dts.datasetid = ANY(dsid)
	GROUP BY dts.datasetid, cmet.chronologyid, cmet.meta
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="datasetauthors" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
  SELECT dst.datasetid,  jsonb_agg(jsonb_build_object('contactid', cnt.contactid,
                                'contactname', cnt.contactname,
                                 'familyname', cnt.familyname,
                                  'firstname', cnt.givennames,
                                   'initials', cnt.leadinginitials)) AS authors
  FROM ndb.datasets AS dst
  JOIN ndb.datasetpis AS dspi ON dspi.datasetid = dst.datasetid LEFT OUTER JOIN
  ndb.contacts AS cnt ON cnt.contactid = dspi.contactid
  WHERE dst.datasetid = dsid
  GROUP BY dst.datasetid
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="datasetchanged" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
  SELECT       ds.datasetid,
          MAX(ds.recdatemodified) AS dataset,
        MAX(dspi.recdatemodified) AS dspi,
         MAX(cts.recdatemodified) AS contact,
          MAX(cu.recdatemodified) AS collunit,
         MAX(sts.recdatemodified) AS sites,
         MAX(dst.recdatemodified) AS datatype,
         MAX(dss.recdatemodified) AS ds_sub,
         MAX(dsp.recdatemodified) AS datapub,
         MAX(chr.recdatemodified) AS chron,
  	     MAX(pub.recdatemodified) AS pub
  FROM
    ndb.datasets AS ds
    LEFT JOIN          ndb.datasetpis AS dspi ON ds.datasetid = dspi.datasetid
    LEFT JOIN            ndb.contacts AS cts  ON dspi.contactid = cts.contactid
    INNER JOIN    ndb.collectionunits AS cu   ON ds.collectionunitid = cu.collectionunitid
    INNER JOIN              ndb.sites AS sts  ON cu.siteid = sts.siteid
    INNER JOIN       ndb.datasettypes AS dst  ON ds.datasettypeid = dst.datasettypeid
    INNER JOIN ndb.datasetsubmissions AS dss  ON dss.datasetid = ds.datasetid
    LEFT JOIN ndb.datasetpublications AS dsp  ON dsp.datasetid = ds.datasetid
    LEFT JOIN        ndb.chronologies AS chr  ON chr.collectionunitid = cu.collectionunitid
    LEFT JOIN        ndb.publications AS pub  ON dsp.publicationid = pub.publicationid
    LEFT JOIN             ndb.samples AS smp  ON smp.datasetid = ds.datasetid
    LEFT JOIN                ndb.data AS dt   ON dt.sampleid = smp.sampleid
    LEFT JOIN ndb.variables AS var ON var.variableid = dt.variableid
    LEFT JOIN ndb.datasetdoi AS doi ON doi.datasetid = ds.datasetid
    GROUP BY ds.datasetid
    ORDER BY pub DESC
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="datasetinfo" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
WITH siteid AS (
    SELECT clu.siteid AS siteid
    FROM
         ndb.datasets AS dts
    LEFT OUTER JOIN ndb.collectionunits AS clu ON clu.collectionunitid = dts.collectionunitid
    WHERE dts.datasetid = ANY(dsid)
),
siteobj AS (
    SELECT * 
    FROM
         ap.siteobject((SELECT array_agg(siteid) FROM siteid))
)
SELECT DISTINCT dts.datasetid,
       sts.site || 
       jsonb_build_object('collectionunit', json_build_object('collectionunitid', clu.collectionunitid,
                                                       'depositionalenvironment', dvt.depenvt,
                                                                'collectionunit', clu.collunitname,
                                                                        'handle', clu.handle,
                                                                  'collunittype', cts.colltype,
                                                                      'colldate', clu.colldate,
                                                                    'waterdepth', clu.waterdepth,
                                                                         'notes', clu.notes,
                                                              'collectiondevice', clu.colldevice,
                                                                      'location', clu.location,
                                                                   'gpslocation', json_build_object('latitude', clu.gpslatitude, 
                                                                                                   'longitude', clu.gpslongitude, 
                                                                                                 'gpsaltitude', clu.gpsaltitude, 
                                                                                                    'gpserror', clu.gpserror)),
						  'dataset', json_build_object('datasetid', dts.datasetid,
							                         'datasettype', dst.datasettype,
							                         'datasetname', dts.datasetname,
                                                    'datasetnotes', dts.notes,
							                            'database', cstdb.databasename,
							                                 'doi', doi.dois,
													   'datasetpi', dsau.authors,
														'agerange', agerange.ages)) AS site
FROM
         ndb.datasets AS dts
  LEFT OUTER JOIN                      ndb.collectionunits AS clu      ON clu.collectionunitid = dts.collectionunitid
  LEFT OUTER JOIN                         ndb.depenvttypes AS dvt      ON dvt.depenvtid = clu.depenvtid
  LEFT OUTER JOIN                                  siteobj AS sts      ON sts.siteid = clu.siteid
  LEFT OUTER JOIN                         ndb.datasettypes AS dst      ON dst.datasettypeid = dts.datasettypeid
  LEFT OUTER JOIN                      ndb.collectiontypes AS cts      ON clu.colltypeid = cts.colltypeid
  LEFT OUTER JOIN                     ndb.datasetdatabases AS dsdb     ON dsdb.datasetid = dts.datasetid
  LEFT OUTER JOIN                           ndb.collectors AS col      ON col.collectionunitid = clu.collectionunitid
  LEFT OUTER JOIN       (SELECT * FROM doi.agerange(dsid)) AS agerange ON agerange.datasetid = dts.datasetid
  LEFT OUTER JOIN                ndb.constituentdatabases  AS cstdb    ON dsdb.databaseid = cstdb.databaseid
  LEFT OUTER JOIN     (SELECT * FROM doi.doireturn(dsid))  AS doi      ON doi.datasetid = dts.datasetid 
  LEFT OUTER JOIN (SELECT * FROM doi.datasetauthors(dsid)) AS dsau     ON dsau.datasetid = dts.datasetid
WHERE dts.datasetid = ANY(dsid)

]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="doiapi" returnType="SETOF jsonb" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
WITH chronmeta AS (
	SELECT datasetid,
				jsonb_agg(jsonb_build_object('chronology', chronologies)) AS chronologies
	FROM doi.chronmeta(dsid)
	GROUP BY datasetid
),
ids AS (
  SELECT * FROM UNNEST(dsid) AS dsid
),
datameta AS (
  SELECT DISTINCT * FROM doi.ndbdata(dsid)
)
SELECT jsonb_build_object(   'datasetid', ids.dsid,
	                      'chronologies', chr.chronologies,
	                              'data', dt.data) AS site
FROM
	datameta  AS dt
	JOIN chronmeta AS chr ON dt.datasetid = chr.datasetid
											JOIN ids AS ids ON ids.dsid = dt.datasetid
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="doifreeze" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
WITH chronmeta AS (
	SELECT datasetid,
				json_agg(json_build_object('chronology', chronologies)) AS chronologies
	FROM doi.chronmeta(dsid)
	GROUP BY datasetid
),
ids AS (
  SELECT * FROM UNNEST(dsid) AS dsid
),
datameta AS (
  SELECT * FROM doi.ndbdata(dsid)
)
SELECT ids.dsid AS datasetid,
			 json_strip_nulls(json_build_object('chronologies', jsonb_build_object('chronologies', chr.chronologies),
															'data', dt.data)) AS record
FROM
	datameta  AS dt
	JOIN chronmeta AS chr ON dt.datasetid = chr.datasetid
											JOIN ids AS ids ON ids.dsid = dt.datasetid

]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="doireturn" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
  SELECT doi.datasetid, json_agg(doi.doi)
  FROM ndb.datasetdoi AS doi
  WHERE doi.datasetid = dsid
  GROUP BY doi.datasetid;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="inds" returnType="boolean" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
  SELECT COUNT(*) = 1 FROM
  ndb.datasets AS ds
  WHERE ds.datasetid = dsid;
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="lastdayds" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[

  SELECT array_agg(ds.datasetid) AS datasets,
        cts.contactname,
		    cts.leadinginitials,
        cts.givennames,
        cts.familyname,
        cts.suffix,
        cts.title,
        cts.phone,
        cts.email,
        cts.address,
        cts.url
  FROM ndb.datasets AS ds
  JOIN ndb.datasetpis AS dspi ON dspi.datasetid = ds.datasetid
  JOIN ndb.contacts AS cts ON cts.contactid = dspi.contactid
  LEFT JOIN ndb.datasetdoi AS dsdoi ON dsdoi.datasetid = ds.datasetid
	LEFT JOIN doi.frozen AS frz ON frz.datasetid = ds.datasetid
  WHERE
  dsdoi.doi IS NULL AND
	frz.download IS NULL AND
  age(ds.recdatecreated) > interval '1 day'
  GROUP BY cts.contactname,
		cts.leadinginitials,
		cts.givennames,
		cts.familyname,
		cts.suffix,
		cts.title,
		cts.phone,
		cts.email,
		cts.address,
		cts.url
]]></definition>
      </routine>
      <routine dataAccess="MODIFIES" deterministic="false" name="ndbdata" returnType="SETOF record" securityType="INVOKER" type="FUNCTION">
         <comment/>
         <definition language="SQL"><![CDATA[
	WITH dssamples AS (
		SELECT
		ds.datasetid,
		jsonb_build_object('sampleid', dsd.sampleid,
							'samplename', smp.samplename,
							'analysisunitid', anu.analysisunitid,
							'analysisunitname', anu.analysisunitname,
							'thickness', anu.thickness,
							'igsn', anu.igsn,
							'depth', anu.depth,
							'datum', jsonb_agg(DISTINCT jsonb_build_object('value', dt.value,
											'variablename', tx.taxonname,
												'taxonid', tx.taxonid,
											'taxongroup', txg.taxagroup,
										'ecologicalgroup', ecg.ecolgroupid,
												'element', ve.variableelement,
											'elementtype', vt.elementtype,
												'symmetry', vs.symmetry,
												'context', vc.variablecontext,
													'units', vru.variableunits)),
							'sampleanalyst', json_agg(DISTINCT jsonb_build_object('contactid', cnt.contactid,
																				'contactname', cnt.contactname,
																				'familyname', cnt.familyname,
																				'firstname', cnt.givennames,
																					'initials', cnt.leadinginitials)),
							'ages', jsonb_agg(
										DISTINCT jsonb_build_object('chronologyid', ch.chronologyid,
														'chronologyname', ch.chronologyname,
														'agetype', cht.agetype,
														'age', sma.age,
														'ageyounger', sma.ageyounger,
														'ageolder', sma.ageolder))) AS sampledata
		FROM
		ndb.datasets AS ds
		LEFT OUTER JOIN ndb.dsdatasample AS dsd ON dsd.datasetid = ds.datasetid
		LEFT OUTER JOIN ndb.data AS dt ON dt.dataid = dsd.dataid
		LEFT OUTER JOIN ndb.variables as var ON var.variableid = dsd.variableid
		LEFT OUTER JOIN ndb.taxa AS tx ON tx.taxonid = var.taxonid
			LEFT OUTER JOIN ndb.taxagrouptypes AS txg ON txg.taxagroupid = tx.taxagroupid
			LEFT OUTER JOIN ndb.ecolgroups AS ecg ON ecg.taxonid = tx.taxonid
		LEFT OUTER JOIN ndb.variableunits AS vru ON vru.variableunitsid = var.variableunitsid
		LEFT OUTER JOIN ndb.samples AS smp ON smp.sampleid = dsd.sampleid
			LEFT OUTER JOIN ndb.sampleanalysts AS san ON san.sampleid = smp.sampleid
			LEFT JOIN ndb.contacts AS cnt ON cnt.contactid = san.contactid
		LEFT OUTER JOIN ndb.analysisunits AS anu ON anu.analysisunitid = smp.analysisunitid
		LEFT JOIN ndb.variableelements AS ve ON ve.variableelementid = var.variableelementid
			LEFT OUTER JOIN ndb.elementsymmetries AS vs ON vs.symmetryid = ve.symmetryid
			LEFT OUTER JOIN ndb.elementtypes AS vt ON vt.elementtypeid = ve.elementtypeid
		LEFT JOIN ndb.variablecontexts AS vc ON vc.variablecontextid = var.variablecontextid
		LEFT OUTER JOIN ndb.sampleages AS sma ON sma.sampleid = smp.sampleid
		LEFT OUTER JOIN ndb.chronologies AS ch ON sma.chronologyid = ch.chronologyid
		LEFT OUTER JOIN ndb.agetypes AS cht ON cht.agetypeid = ch.agetypeid
		WHERE
		ds.datasetid = dsid
		GROUP BY ds.datasetid,
				dsd.sampleid,
				smp.sampleid, 
				anu.analysisunitid
		)
		SELECT
		  ds.datasetid,
		  jsonb_build_object('samples', jsonb_agg(DISTINCT dss.sampledata)) AS data
		FROM
		ndb.datasets AS ds
		JOIN dssamples AS dss ON ds.datasetid = dss.datasetid
			JOIN (SELECT datasetid,
						site::jsonb
						FROM doi.datasetinfo(dsid)) AS dsinfo ON dsinfo.datasetid = ds.datasetid
		WHERE ds.datasetid = dsid
		GROUP BY ds.datasetid, dsinfo.site

]]></definition>
      </routine>
   </routines>
</database>
